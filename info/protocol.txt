all data are transfering in messages
all types in little endian bytes order

[1]char - 1 byte signed
[2]short - 2 bytes signed
[3]int - 4 bytes signed
[4]float - 4 bytes
[5]double - 8 bytes
[6]string - 2 bytes id size, then size bytes is string body (plase don't use strings more then 65000 chars) 
//!long long - not used, please use double for transfering very big numbers
type[n] - seqaense of n elements == type,type,type,...


standart packet structure
{
	short //size of message, then will be size bytes - message data, please don't use message more than 65000 bytes long
	char //message type
	//message header
	char n //number of elements
	//message body
	char //element type
	//element
	...
}

proxy packet structure
{
	short //size of message
	//standart packet
	char //id
	...
	//service data
	char //0 client, 1 server
	int //id, for message from 0 == broadcast
}

text messages
{
	short //size
	char //101
	char //4
	char //3
	int //chat id
	char //2
	short //item id
	char //1
	char //packet type, start/continue/end - (&3== 1/2/3)
	char //6
	string //message data
}

message type
to server
0-initial auth, igrored in other times
1-auth
to client
1-OK answer
2-auth token
3-user info


//authorization in packets packet size not showen

to server ->{
	char //0
	char //1
	char //6
	string //client token
}

to client <-{ //success message
	char //1
	char //1
	char //1
	char //1
}

->{//auth1
	char //1
	char //2
	char //1
	char //1 //mes type
	char //6
	string //login
}

<-{
	char //2 auth process
	char //1
	char //6
	string //token
}

->{//auth2
	char //1
	char //2
	char //1
	char //2
	char //6
	string //hashed password
}

<-{//on success
	char //3-user info
	char //2 number of fields
	char //3 
	int //id
	char //6 
	string //name
}
//auth successed
